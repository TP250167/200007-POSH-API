// <auto-generated />
using System;
using EL.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EL.API.Migrations
{
    [DbContext(typeof(ELContext))]
    [Migration("20200627113332_intial")]
    partial class intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("EL.Domain.Entities.Attendee", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("ScheduleId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.Property<byte[]>("UserId")
                        .IsRequired()
                        .HasColumnType("varbinary(16)");

                    b.HasKey("Id");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("UserId");

                    b.ToTable("ATTENDEE_TBL");
                });

            modelBuilder.Entity("EL.Domain.Entities.DecisionloopEntity.Decisionloop", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("MainStoryname")
                        .HasColumnName("Main_Story_NAME")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("Option1")
                        .HasColumnName("OPTION1")
                        .HasColumnType("text");

                    b.Property<string>("Option2")
                        .HasColumnName("OPTION2")
                        .HasColumnType("text");

                    b.Property<string>("Option3")
                        .HasColumnName("OPTION3")
                        .HasColumnType("text");

                    b.Property<string>("Option4")
                        .HasColumnName("OPTION4")
                        .HasColumnType("text");

                    b.Property<long>("QuestionId")
                        .HasColumnName("QUESTION_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Questionname")
                        .HasColumnName("QUESTION_NAME")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnName("RESULT")
                        .HasColumnType("text");

                    b.Property<long>("Substoryid")
                        .HasColumnName("SUB_STORY_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Substoryname")
                        .HasColumnName("SUB_STORY_NAME")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DECISIONS_LOOP_TBL");
                });

            modelBuilder.Entity("EL.Domain.Entities.Iccemp.Icc", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("Iccempdeparttype")
                        .HasColumnName("EMP_DEPART_TYPE")
                        .HasColumnType("text");

                    b.Property<string>("Iccempemail")
                        .HasColumnName("EMP_MAIL")
                        .HasColumnType("text");

                    b.Property<string>("Iccempjobtitle")
                        .HasColumnName("EMP_JOB_TITLE")
                        .HasColumnType("text");

                    b.Property<string>("Iccempname")
                        .HasColumnName("EMP_NAME")
                        .HasColumnType("text");

                    b.Property<long>("Iccempphoneno")
                        .HasColumnName("EMP_PHONE_NO")
                        .HasColumnType("bigint");

                    b.Property<string>("Iccempqulification")
                        .HasColumnName("EMP_QULIFICATION")
                        .HasColumnType("text");

                    b.Property<string>("Iccempstatus")
                        .HasColumnName("EMP_STATUS")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("ICC_EMP_TBL");
                });

            modelBuilder.Entity("EL.Domain.Entities.Schedule", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("CreatorId")
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValue(new DateTime(2020, 6, 27, 17, 3, 32, 94, DateTimeKind.Local).AddTicks(5111));

                    b.Property<byte[]>("ModifierId")
                        .HasColumnType("varbinary(16)");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(3);

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("ModifierId");

                    b.ToTable("SCHEDULE_TBL");
                });

            modelBuilder.Entity("EL.Domain.Entities.Time.Timeup", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("MainStoryname")
                        .HasColumnName("Main_Story_NAME")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("Option1")
                        .HasColumnName("OPTION1")
                        .HasColumnType("text");

                    b.Property<string>("Option2")
                        .HasColumnName("OPTION2")
                        .HasColumnType("text");

                    b.Property<string>("Option3")
                        .HasColumnName("OPTION3")
                        .HasColumnType("text");

                    b.Property<string>("Option4")
                        .HasColumnName("OPTION4")
                        .HasColumnType("text");

                    b.Property<long>("QuestionId")
                        .HasColumnName("QUESTION_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Questionname")
                        .HasColumnName("QUESTION_NAME")
                        .HasColumnType("text");

                    b.Property<string>("Result")
                        .HasColumnName("RESULT")
                        .HasColumnType("text");

                    b.Property<long>("Substoryid")
                        .HasColumnName("SUB_STORY_ID")
                        .HasColumnType("bigint");

                    b.Property<string>("Substoryname")
                        .HasColumnName("SUB_STORY_NAME")
                        .HasColumnType("text");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnName("TIME_END_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnName("TIME_START_ON")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("TIMEUP_LOOP_TBL");
                });

            modelBuilder.Entity("EL.Domain.Entities.User", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Avatar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(4000)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(4000)");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("USER_TBL");
                });

            modelBuilder.Entity("EL.Domain.Entities.comp.Complain", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("ComplaintFrom")
                        .HasColumnName("COMPLAINT_FROM")
                        .HasColumnType("text");

                    b.Property<string>("Complaintdate")
                        .HasColumnName("COMPLAINT_DATE")
                        .HasColumnType("text");

                    b.Property<long>("Complaintdesc")
                        .HasColumnName("COMPLAIN_DESCTIPTION")
                        .HasColumnType("bigint");

                    b.Property<string>("Complaintname")
                        .HasColumnName("COMPLAIN_NAME")
                        .HasColumnType("text");

                    b.Property<string>("Compstatus")
                        .HasColumnName("COMPLAIN_STATUS")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("COMPLAIN_TBL");
                });

            modelBuilder.Entity("EL.Domain.GamePosh.Game", b =>
                {
                    b.Property<byte[]>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varbinary(16)");

                    b.Property<string>("Active")
                        .HasColumnName("IS_ACTIVE")
                        .HasColumnType("text");

                    b.Property<string>("BackgroundAudio")
                        .HasColumnName("BACKGROUNDAUDIO")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnName("CREATED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasColumnType("text");

                    b.Property<string>("Duration")
                        .HasColumnName("DURATION")
                        .HasColumnType("text");

                    b.Property<string>("GameName")
                        .HasColumnName("GAME_NAME")
                        .HasColumnType("text");

                    b.Property<string>("GameType")
                        .HasColumnName("GAME_TYPE")
                        .HasColumnType("text");

                    b.Property<string>("MaxScore")
                        .HasColumnName("MAXSCORE")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnName("MODIFIED_ON")
                        .HasColumnType("datetime");

                    b.Property<string>("Noofcases")
                        .HasColumnName("NOOFCASES")
                        .HasColumnType("text");

                    b.Property<string>("Objective")
                        .HasColumnName("OBJECTIVE")
                        .HasColumnType("text");

                    b.Property<string>("Outcome")
                        .HasColumnName("OUTCOME")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("POSH_GAME_PLAY_TBL");
                });

            modelBuilder.Entity("EL.Domain.Entities.Attendee", b =>
                {
                    b.HasOne("EL.Domain.Entities.Schedule", "Schedule")
                        .WithMany("Attendees")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EL.Domain.Entities.User", "User")
                        .WithMany("SchedulesAttended")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("EL.Domain.Entities.Schedule", b =>
                {
                    b.HasOne("EL.Domain.Entities.User", "Creator")
                        .WithMany("SchedulesCreated")
                        .HasForeignKey("CreatorId");

                    b.HasOne("EL.Domain.Entities.User", "Modifier")
                        .WithMany()
                        .HasForeignKey("ModifierId");
                });
#pragma warning restore 612, 618
        }
    }
}
